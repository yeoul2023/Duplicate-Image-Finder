Parameters
=====

.. _parameters:
.. _difPy.build:

difPy.build
------------

Before difPy can perform any search, it needs to build it's image repository and transform the images in the provided directory into tensors. This is what is done when ``difPy.build()`` is invoked.

Upon completion, ``difPy.build()`` returns a ``dif`` object that can be used in :ref:`difPy.search` to start the search process.

``difPy.build`` supports the following parameters:

.. code-block:: python

   difPy.build(*directory, recursive=True, in_folder=False, limit_extensions=True, 
   px_size=50, show_progress=False, logs=True)

.. csv-table::
   :header: Parameter,Input Type,Default Value,Other Values
   :widths: 10, 10, 10, 20
   :class: tight-table

   :ref:`directory`,"``str``, ``list``",,
   :ref:`recursive`,``bool``,``True``,``False``
   :ref:`in_folder`,"``bool``, ``False``",``True``
   :ref:`px_size`,"``int``, ``float``",50, ``int``
   :ref:`limit_extensions`,``bool``,``True``,``False``
   :ref:`show_progress`,``bool``,``True``,``False``
   :ref:`logs`,``bool``,``True``,``False``

.. note::

   If you want to reuse the image tensors generated by difPy in your own application, you can access the generated repository by calling ``dif._tensor_dictionary``. To reverse the image IDs to the original filenames, use ``dif._filename_dictionary``.

.. _directory:

directory (str, list)
^^^^^^^^^^^^

difPy supports single and multi-folder search.

**Single Folder Search**:

.. code-block:: python

   import difPy
   dif = difPy.build("C:/Path/to/Folder/")
   search = difPy.search(dif)

**Multi Folder Search**:

.. code-block:: python

   import difPy
   dif = difPy.build(["C:/Path/to/Folder_A/", "C:/Path/to/Folder_B/", "C:/Path/to/Folder_C/", ... ])
   search = difPy.search(dif)

Folder paths can be specified as standalone Python strings, or within a list.

.. _recursive:

recursive (bool)
^^^^^^^^^^^^

By default, difPy will search for matching images recursively within the subdirectories of the :ref:`directory` parameter. If set to ``False``, subdirectories will not be scanned.

``True`` = (default) searches recursively through all subdirectories in the directory paths

``False`` = disables recursive search through subdirectories in the directory paths

.. _in_folder:

in_folder (bool)
^^^^^^^^^^^^

By default, difPy will search for matches in the union of all directories specified in the :ref:`directory` parameter. To have difPy only search for matches within each folder separately, set ``in_folder`` to ``True``.

``True`` = searches for matches only among each individual directory, including subdirectories

``False`` = (default) searches for matches in the union of all directories

.. _limit_extensions:

limit_extensions (bool)
^^^^^^^^^^^^

By default, difPy only searches for images with a predefined filetype. This speeds up the process, since difPy does not have to attempt to decode files it might not support. Nonetheless, you can let difPy try to decode other file types by setting ``limit_extensions`` to ``False``.

.. note::

   Predefined image types includes: ``apng``, ``bw``, ``cdf``, ``cur``, ``dcx``, ``dds``, ``dib``, ``emf``, ``eps``, ``fli``, ``flc``, ``fpx``, ``ftex``, ``fits``, ``gd``, ``gd2``, ``gif``, ``gbr``, ``icb``, ``icns``, ``iim``, ``ico``, ``im``, ``imt``, ``j2k``, ``jfif``, ``jfi``, ``jif``, ``jp2``, ``jpe``, ``jpeg``, ``jpg``, ``jpm``, ``jpf``, ``jpx``, ``jpeg``, ``mic``, ``mpo``, ``msp``, ``nc``, ``pbm``, ``pcd``, ``pcx``, ``pgm``, ``png``, ``ppm``, ``psd``, ``pixar``, ``ras``, ``rgb``, ``rgba``, ``sgi``, ``spi``, ``spider``, ``sun``, ``tga``, ``tif``, ``tiff``, ``vda``, ``vst``, ``wal``, ``webp``, ``xbm``, ``xpm``.

``True`` = (default) difPy's search is limited to a set of predefined image types

``False`` = difPy searches through all the input files

difPy supports most popular image formats. Nevertheless, since it relies on the Pillow library for image decoding, the supported formats are restricted to the ones listed in the `Pillow Documentation`_. Unsupported file types will by marked as invalid and included in the process statistics output under ``invalid_files`` (see :ref:`Process Statistics`).

.. _Pillow Documentation: https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html

.. _px_size:

px_size (int)
^^^^^^^^^^^^

.. note::

   Recommended not to change default value.

Absolute size in pixels (width x height) of the images before being compared. The higher the ``px_size``, the more precise the comparison, but in turn more computational resources are required for difPy to compare the images. The lower the ``px_size``, the faster, but the more imprecise the comparison process gets.

By default, ``px_size`` is set to ``50``.

**Manual setting**: ``px_size`` can be manually adjusted by setting it to any ``int``.

.. _show_progress:

show_progress (bool)
^^^^^^^^^^^^

By default, difPy will show a progress bar of the running process.

``True`` = (default) displays the progress bar

``False`` = disables the progress bar

.. _logs:

logs (bool)
^^^^^^^^^^^^

By default, difPy outputs ``search.stats`` statistics after each process, as described in :ref:`Process Statistics`. 

To skip the creation of stats, set ``logs`` to ``False``.

.. raw:: html

   <hr>

.. _difPy.search:

difPy.search
------------

After the ``dif`` object has been built using :ref:`difPy.build`, the search can be initiated with ``difPy.search``. 

When invoking ``difPy.search()``, difPy starts comparing the images to find duplicates or similarities, based on the MSE (Mean Squared Error) between both image tensors. The target similarity rate i. e. MSE value is set with the :ref:`similarity` parameter.

After the search is completed, further actions can be performed using :ref:`search.move_to` and :ref:`search.delete`.

``difPy.search`` supports the following parameters:

.. csv-table::
   :header: Parameter,Input Type,Default Value,Other Values
   :widths: 10, 10, 10, 20
   :class: tight-table

   :ref:`difPy_obj`,"``difPy_obj``",,
   :ref:`similarity`,"``str``, ``int``",``'duplicates'``, "``'similar'``, any ``int`` or ``float``"
   :ref:`show_progress`,``bool``,``True``,``False``
   :ref:`logs`,``bool``,``True``,``False``

.. code-block:: python

   difPy.search(difPy_obj, similarity='duplicates', show_progress=False, logs=True)

.. _difPy_obj:

difPy_obj
^^^^^^^^^^^^

The required ``difPy_obj`` parameter should be pointing to the ``dif`` object that was built during the invocation of :ref:`difPy.build`. 

.. _similarity:

similarity (str, int)
^^^^^^^^^^^^

difPy compares the images to find duplicates or similarities, based on the MSE (Mean Squared Error) between both image tensors. The target similarity rate i. e. MSE value is set with the ``similarity`` parameter.

``"duplicates"`` = (default) searches for duplicates. MSE threshold is set to ``0``.

``"similar"`` = searches for similar images. MSE threshold is set to ``50``.

Depending on which use case you want to apply difPy for, the granularity for the classification of images can be adjusted.

**Manual setting**: the match MSE threshold can be adjusted manually by setting the ``similarity`` parameter to any ``int`` or ``float``. difPy will then search for images that match an MSE threshold **equal to or lower than** the one specified.

When searching for **similar** images, the choice of MSE threshold becomes very important. A threshold of ``50`` will usually find similarities in regular photographs well, but if applied to images containing for example text with a plain white background, an MSE threshold of ``50`` will usually be too high and difPy will consider all images to be similar, even though they are not. In this case, for more precision, the ``similarity`` parameter should be lowered. Additionally, the ``px_size`` parameter can also be lowered to gain more precision (see :ref:`px_size`).

.. _show_progress:

show_progress (bool)
^^^^^^^^^^^^

By default, difPy will show a progress bar of the running process.

``True`` = (default) displays the progress bar

``False`` = disables the progress bar

.. _logs:

logs (bool)
^^^^^^^^^^^^

By default, difPy outputs ``search.stats`` statistics after each process, as described in :ref:`Process Statistics`. 

To skip the creation of stats, set ``logs`` to ``False``.

.. raw:: html

   <hr>

.. _search.move_to:

search.move_to
------------

difPy can automatically move the lower quality duplicate/similar images it found to another directory. Images can be moved by invoking ``move_to`` on the difPy search:

.. code-block:: python

   import difPy
   dif = difPy.build("C:/Path/to/Folder_A/")
   search = difPy.search(dif)
   search.move_to(destination_path="C:/Path/to/Destination/")

.. code-block:: console

   > Output
   Moved 756 files(s) to "C:/Path/to/Destination"

.. _destination_path:

destination_path (str)
^^^^^^^^^^^^

Directory of where the lower quality files should me moved. Should be given as Python ``string``.

.. raw:: html

   <hr>

.. _search.delete:

search.delete
------------

difPy can automatically delete the lower quality duplicate/similar images it found. Images can be deleted by invoking ``delete`` on the difPy search:

.. note::

   Please use with care, as this cannot be undone.

.. code-block:: python

   import difPy
   dif = difPy.build("C:/Path/to/Folder_A/")
   search = difPy.search(dif)
   search.delete(silent_del=False)

.. code-block:: console

   > Output
   Deleted 756 files(s)

The images are deleted based on the ``lower_quality`` output as described under section :ref:`output`. After auto-deleting the images, every match group will be left with one single image: the image with the highest quality among its match group.

``delete`` asks for user confirmation before deleting the images. The user confirmation can be skipped by setting :ref:`silent_del` to ``True``.

.. _silent_del:

silent_del (bool)
^^^^^^^^^^^^

.. note::

   Please use with care, as this cannot be undone.

When set to ``True``, the user confirmation for :ref:`search.delete` is skipped and the lower resolution matched images that were found by difPy are automatically deleted from their folder(s).